const express = require("express");
const { open } = require("sqlite");
const sqlite3 = require("sqlite3");
const path = require("path");

const format = require("date-fns/format");
var isValid = require("date-fns/isValid");
const databasePath = path.join(__dirname, "todoApplication.db");

const app = express();

app.use(express.json());

let database = null;

const initializeDbAndServer = async () => {
  try {
    database = await open({
      filename: databasePath,
      driver: sqlite3.Database,
    });

    app.listen(3000, () =>
      console.log("Server Running at http://localhost:3000/")
    );
  } catch (error) {
    console.log(`DB Error: ${error.message}`);
    process.exit(1);
  }
};

initializeDbAndServer();

const convertToDoDbObjectToResponseObject = (dbObject) => {
  return {
    id: dbObject.id,
    todo: dbObject.todo,
    priority: dbObject.priority,
    status: dbObject.status,
    category: dbObject.category,
    dueDate: dbObject.due_date,
  };
};

const hasPriorityAndStatusProperties = (requestQuery) => {
  return (
    requestQuery.priority !== undefined && requestQuery.status !== undefined
  );
};
const hasPriorityProperty = (requestQuery) => {
  return requestQuery.priority !== undefined;
};

const hasStatusProperty = (requestQuery) => {
  return requestQuery.status !== undefined;
};

const hasCategoryAndStatusProperty = (requestQuery) => {
  return (
    requestQuery.status !== undefined && requestQuery.category !== undefined
  );
};

const hasCategoryProperty = (requestQuery) => {
  return requestQuery.category !== undefined;
};

const hasCategoryAndPriorityProperty = (requestQuery) => {
  return (
    requestQuery.priority !== undefined && requestQuery.category !== undefined
  );
};

app.get("/todos/", async (request, response) => {
  let dataResponse = null;
  let updatedColumn = "";
  let getTodosQuery = "";
  const { search_q = "", priority, status, category } = request.query;

  switch (true) {
    case hasPriorityAndStatusProperties(request.query):
      getTodosQuery = ` SELECT 
                * 
          FROM 
                todo 
          WHERE 
                todo LIKE '%${search_q}%'
                AND status = '${status}'
                AND priority = '${priority}';`;
      break;

    case hasPriorityProperty(request.query):
      updatedColumn = "Priority";
      getTodosQuery = ` SELECT 
                * 
           FROM 
                todo 
           WHERE 
                todo LIKE '%${search_q}%'
                AND priority = '${priority}';`;
      break;
    case hasStatusProperty(request.query):
      updatedColumn = "Status";
      getTodosQuery = ` SELECT 
                * 
           FROM 
                todo 
           WHERE 
                todo LIKE '%${search_q}%'
                AND status = '${status}';`;
      break;
    case hasCategoryAndStatusProperty(request.query):
      getTodosQuery = ` SELECT 
                * 
           FROM 
                todo 
           WHERE 
                todo LIKE '%${search_q}%'
                AND status = '${status}'
                AND category = '${category}';`;
      break;
    case hasCategoryProperty(request.query):
      updatedColumn = "Category";
      getTodosQuery = ` SELECT 
                * 
           FROM 
                todo 
           WHERE 
                todo LIKE '%${search_q}%'
                AND category = '${category}';`;
      break;
    case hasCategoryAndPriorityProperty(request.query):
      getTodosQuery = ` SELECT 
                * 
           FROM 
                todo 
           WHERE 
                todo LIKE '%${search_q}%'
                AND priority = '%${priority}
                AND category = '${category}';`;
      break;
    default:
      getTodosQuery = ` SELECT 
                * 
           FROM 
                todo 
           WHERE 
                todo LIKE '%${search_q}%';`;
      break;
  }
  dataResponse = await database.all(getTodosQuery);
  console.log(dataResponse);
  if (dataResponse.length === 0) {
    response.status(400);
    response.send(`Invalid Todo ${updatedColumn}`);
  } else {
    response.send(
      dataResponse.map((eachTodo) =>
        convertToDoDbObjectToResponseObject(eachTodo)
      )
    );
  }
});

app.get("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;

  const getTodoQuery = `SELECT * FROM todo WHERE id = ${todoId};`;
  const dbResponse = await database.get(getTodoQuery);

  response.send(convertToDoDbObjectToResponseObject(dbResponse));
});

app.post("/todos/", async (request, response) => {
  const { id, todo, priority, status, category, dueDate } = request.body;
  const [year, month, day] = dueDate.split("-");
  console.log(year);
  console.log(month);
  console.log(day);
  let updatedColumn2 = "";
  if (priority !== "HIGH" && priority !== "LOW" && priority !== "MEDIUM") {
    updatedColumn2 = "Priority";
  } else if (
    status !== "TO DO" &&
    status !== "IN PROGRESS" &&
    status !== "DONE"
  ) {
    updatedColumn2 = "Status";
  } else if (
    category !== "WORK" &&
    category !== "HOME" &&
    category !== "LEARNING"
  ) {
    updatedColumn2 = "Category";
  } else if (year.length !== 4 || month > 12 || day > 31) {
    updatedColumn2 = "Due Date";
  }

  if (
    updatedColumn2 === "Priority" ||
    updatedColumn2 === "Status" ||
    updatedColumn2 === "Category"
  ) {
    response.status(400);
    response.send(`Invalid Todo ${updatedColumn2}`);
  } else if (updatedColumn2 === "Due Date") {
    response.status(400);
    response.send(`Invalid ${updatedColumn2}`);
  } else {
    const createToDoQuery = `INSERT INTO todo
    (id, todo, priority, status, category,due_date)
    VALUES (${id},
            '${todo}',
            '${priority}',
            '${status}',
            '${category}',
            '${dueDate}');`;
    await database.run(createToDoQuery);
    response.send("Todo Successfully Added");
  }
});

app.delete("/todos/:todoId/", async (request, response) => {
  const { todoId } = request.params;
  const deleteQuery = `DELETE FROM todo where id =${todoId};`;
  await database.run(deleteQuery);
  response.send("Todo Deleted");
});

app.get("/agenda/", async (request, response) => {
  try {
    const { date } = request.query;
    const [year, month, day] = date.split("-");

    if (year.length === 4 && month <= 12 && day < 31) {
      const formattedDate = format(new Date(date), "yyyy-MM-dd");

      const getQueryOnDate = `SELECT * FROM todo where due_date = '${formattedDate}';`;

      const dbResponse = await database.all(getQueryOnDate);

      response.send(
        dbResponse.map((eachTodo) =>
          convertToDoDbObjectToResponseObject(eachTodo)
        )
      );
    } else {
      response.status(400);
      response.send("Invalid Due Date");
    }
  } catch (e) {
    console.log(`Db Error : ${e.message}`);
  }
});

const putFunctionValidation = async (todoId, updatedColumn, requestBody) => {
  const previousTodoQuery = `
                 SELECT
                        *
                 FROM
                        todo
                 WHERE 
                        id = ${todoId};`;
  const previousTodo = await database.get(previousTodoQuery);

  const {
    todo = previousTodo.todo,
    priority = previousTodo.priority,
    status = previousTodo.status,
    category = previousTodo.category,
    dueDate = previousTodo.dueDate,
  } = requestBody;

  const updateTodoQuery = `
             UPDATE
                todo
             SET
                todo='${todo}',
                priority='${priority}',
                status='${status}',
                category = '${category}',
                due_date = '${dueDate}'
             WHERE
                id = ${todoId};`;
  const dbResponse = await database.run(updateTodoQuery);
};

app.put("/todos/:todoId/", async (request, response) => {
  try {
    const { todoId } = request.params;

    const requestBody = request.body;
    let updatedColumn = "";

    if (requestBody.status !== undefined) {
      if (
        requestBody.status === "TO DO" ||
        requestBody.status === "IN PROGRESS" ||
        requestBody.status === "DONE"
      ) {
        updatedColumn = "Status";
        putFunctionValidation(todoId, updatedColumn, requestBody);
        response.send(`${updatedColumn} Updated`);
      } else {
        response.status(400);
        response.send("Invalid Todo Status");
      }
    } else if (requestBody.priority !== undefined) {
      if (
        requestBody.priority === "HIGH" ||
        requestBody.priority === "MEDIUM" ||
        requestBody.priority === "LOW"
      ) {
        updatedColumn = "Priority";
        putFunctionValidation(todoId, updatedColumn, requestBody);
        response.send(`${updatedColumn} Updated`);
      } else {
        response.status(400);
        response.send("Invalid Todo Priority");
      }
    } else if (requestBody.category !== undefined) {
      if (
        requestBody.category === "WORK" ||
        requestBody.category === "HOME" ||
        requestBody.category === "LEARNING"
      ) {
        updatedColumn = "Category";
        putFunctionValidation(todoId, updatedColumn, requestBody);
        response.send(`${updatedColumn} Updated`);
      } else {
        response.status(400);
        response.send("Invalid Todo Category");
      }
    } else if (requestBody.dueDate !== undefined) {
      const [year, month, day] = requestBody.dueDate.split("-");
      if (year.length === 4 && month <= 12 && day < 31) {
        updatedColumn = "Due Date";
        putFunctionValidation(todoId, updatedColumn, requestBody);
        response.send(`${updatedColumn} Updated`);
      } else {
        response.status(400);
        response.send("Invalid Due Date");
      }
    } else if (requestBody.todo !== undefined) {
      updatedColumn = "Todo";
      putFunctionValidation(todoId, updatedColumn, requestBody);
      response.send(`${updatedColumn} Updated`);
    }
  } catch (e) {
    console.log(`data base error ${e.message}`);
  }
});

module.exports = app;




GET http://localhost:3000/todos/?status=TO%20DO

###
GET http://localhost:3000/todos/3

###
POST http://localhost:3000/todos/
Content-Type: application/json

{
  "id": 10,
  "priority": "HIGH",
  "status": "IN PROGRESS",
  "category": "LEARNING",
  "dueDate": "22-04-04"
}

###
DELETE http://localhost:3000/todos/3

###
GET http://localhost:3000/agenda/?date=2222-04-04

###

put http://localhost:3000/todos/3
Content-Type: application/json

{
  "category": "dfsdfasd"
}




http://localhost/#/home/workspace/nodejs/coding-assignments/coding-assignment-1

http://localhost/#/home/workspace/nodejs/coding-practices/coding-practice-8a


